class Solution {
    public int minNonZeroProduct(int p) {
        if(p==1)
    		return 1;
    	
        long len=0,a=0,b=0;
    	
        len=power(2,p);
		a=len-2;
		b=len/2-1;
        
        long res=power(a, b,1000000007);
    	
        return (int)((len-1)%1000000007*power(a, b,1000000007)%1000000007);
    }
	
    long power(long a,long b)
    {
    	long ans=(long)Math.pow(a, b);
    	return ans;
    }
	
    long power(long x, long y, long p)
	  {
	    long res = 1; // Initialize result
	 
	    x = x % p; // Update x if it is more than or
	    // equal to p
	 
	    if (x == 0)
	      return 0; // In case x is divisible by p;
	 
	    while (y > 0)
	    {
	 
	      // If y is odd, multiply x with result
	      if ((y & 1) != 0)
	        res = (res * x) % p;
	 
	      // y must be even now
	      y = y >> 1; // y = y/2
	      x = (x * x) % p;
	    }
	    return res;

    }
}
